from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters
import sqlite3
import datetime
import os
import openai

TOKEN = os.getenv("TELEGRAM_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")  # –î–æ–¥–∞—î–º–æ –∫–ª—é—á OpenAI

openai.api_key = OPENAI_API_KEY

conn = sqlite3.connect('users.db', check_same_thread=False)
cursor = conn.cursor()

cursor.execute('''CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    message_count INTEGER DEFAULT 0,
    premium INTEGER DEFAULT 0,
    last_reset DATE
)''')
conn.commit()

def main_menu():
    return ReplyKeyboardMarkup([
        [KeyboardButton("üìö –î–æ–º–∞—à–∫–∞"), KeyboardButton("üìù –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞")],
        [KeyboardButton("üí¨ –ß–∞—Ç –∑ AI"), KeyboardButton("‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞")],
        [KeyboardButton("üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É")]
    ], resize_keyboard=True)

def check_message_limit(user_id):
    today = datetime.date.today().isoformat()
    cursor.execute("SELECT last_reset, message_count, premium FROM users WHERE user_id = ?", (user_id,))
    result = cursor.fetchone()
    if not result:
        cursor.execute("INSERT INTO users (user_id, message_count, premium, last_reset) VALUES (?, 0, 0, ?)", (user_id, today))
        conn.commit()
        return True
    last_reset, count, premium = result
    if premium == 1:
        return True
    if last_reset != today:
        cursor.execute("UPDATE users SET message_count = 0, last_reset = ? WHERE user_id = ?", (today, user_id))
        conn.commit()
        return True
    if count >= 3:
        return False
    return True

def update_message_count(user_id):
    cursor.execute("UPDATE users SET message_count = message_count + 1 WHERE user_id = ?", (user_id,))
    conn.commit()

async def ask_ai(question):
    """–§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å–ø—ñ–ª–∫—É–≤–∞–Ω–Ω—è –∑ AI"""
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[
                {"role": "system", "content": "–¢–∏ –¥—Ä—É–∂–Ω—ñ–π —à–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫. –í—ñ–¥–ø–æ–≤—ñ–¥–∞–π —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é. –î–æ–ø–æ–º–∞–≥–∞–π —à–∫–æ–ª—è—Ä–∞–º –∑ –Ω–∞–≤—á–∞–Ω–Ω—è–º, –¥–æ–º–∞—à–∫–∞–º–∏ —Ç–∞ –∂–∏—Ç—Ç—î–≤–∏–º–∏ –ø–æ—Ä–∞–¥–∞–º–∏. –ë—É–¥—å –ø–æ–∑–∏—Ç–∏–≤–Ω–∏–º —ñ –ø—ñ–¥—Ç—Ä–∏–º—É—é—á–∏–º."},
                {"role": "user", "content": question}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return response.choices[0].message.content
    except Exception as e:
        return f"‚ùå –ü–æ–º–∏–ª–∫–∞ AI: {str(e)}"

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    check_message_limit(user_id)
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤—ñ—Ç! –Ø —Ç–≤—ñ–π —à–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ –∑ AI!\n–û–±–µ—Ä–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –æ–ø—Ü—ñ—é:",
        reply_markup=main_menu()
    )

async def handle_buttons(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    
    if not check_message_limit(user_id):
        await update.message.reply_text(
            "üö´ –õ—ñ–º—ñ—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –≤–∏—á–µ—Ä–ø–∞–Ω–æ!\nüí≥ –û—Ñ–æ—Ä–º—ñ—Ç—å –ø—ñ–¥–ø–∏—Å–∫—É –∑–∞ $5 - /premium",
            reply_markup=main_menu()
        )
        return
        
    update_message_count(user_id)
    
    text = update.message.text
    if text == "üìö –î–æ–º–∞—à–∫–∞":
        response = "üìå –î–æ–º–∞—à–Ω—ñ –∑–∞–≤–¥–∞–Ω–Ω—è:\n- –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞: —Å—Ç–æ—Ä. 45\n- –õ—ñ—Ç–µ—Ä–∞—Ç—É—Ä–∞: —Ç–≤—ñ—Ä –Ω–∞ –ø'—è—Ç–Ω–∏—Ü—é"
    elif text == "üìù –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞":
        response = "üìÖ –ù–∞–π–±–ª–∏–∂—á—ñ –∫–æ–Ω—Ç—Ä–æ–ª—ñ:\n- –ü–æ–Ω–µ–¥—ñ–ª–æ–∫: –ê–ª–≥–µ–±—Ä–∞\n- –°–µ—Ä–µ–¥–∞: –Ü—Å—Ç–æ—Ä—ñ—è"
    elif text == "üí¨ –ß–∞—Ç –∑ AI":
        response = "üí¨ –ù–∞–ø–∏—à–∏ —Å–≤–æ—î –ø–∏—Ç–∞–Ω–Ω—è –ø—Ä—è–º–æ —Ç—É—Ç! –Ø –≤—ñ–¥–ø–æ–≤—ñ–º –∑–∞ –¥–æ–ø–æ–º–æ–≥–æ—é AI ü§ñ"
    elif text == "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞":
        response = "ü§ñ –®–∫—ñ–ª—å–Ω–∏–π –ø–æ–º—ñ—á–Ω–∏–∫ v3.0\n–ó AI-–∞—Å–∏—Å—Ç–µ–Ω—Ç–æ–º!\n–°—Ç–≤–æ—Ä–µ–Ω–æ –¥–ª—è –∑—Ä—É—á–Ω–æ—Å—Ç—ñ —É—á–Ω—ñ–≤!"
    elif text == "üí≥ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É":
        response = "üí≥ –ü—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∞ ($5/–º—ñ—Å—è—Ü—å):\n- –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n- –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n- –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ AI\n\n–û—Ñ–æ—Ä–º—ñ—Ç—å: /premium"
    else:
        # –Ø–∫—â–æ —Ü–µ –Ω–µ –∫–Ω–æ–ø–∫–∞, –∞ –∑–≤–∏—á–∞–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è - –≤—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ AI
        ai_response = await ask_ai(text)
        response = f"ü§ñ AI-–ø–æ–º—ñ—á–Ω–∏–∫:\n{ai_response}"
    
    await update.message.reply_text(response, reply_markup=main_menu())

async def premium(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    await update.message.reply_text(
        "üí≥ –ü—Ä–µ–º—ñ—É–º-–ø—ñ–¥–ø–∏—Å–∫–∞ ($5/–º—ñ—Å—è—Ü—å)\n\n–©–æ –æ—Ç—Ä–∏–º—É—î—à:\n"
        "‚úÖ –ë–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è\n"
        "‚úÖ –ü—Ä—ñ–æ—Ä–∏—Ç–µ—Ç–Ω–∞ –ø—ñ–¥—Ç—Ä–∏–º–∫–∞\n"
        "‚úÖ –ù–µ–æ–±–º–µ–∂–µ–Ω–∏–π –¥–æ—Å—Ç—É–ø –¥–æ AI-—á–∞—Ç—É\n\n"
        "–î–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞–ø–∏—à–∏: @—Ç–≤—ñ–π_–Ω—ñ–∫–Ω–µ–π–º\n"
        "–ü—ñ—Å–ª—è –æ–ø–ª–∞—Ç–∏ –Ω–∞—Ç–∏—Å–Ω–∏ /check_payment",
        reply_markup=main_menu()
    )

async def check_payment(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.message.from_user.id
    cursor.execute("UPDATE users SET premium = 1 WHERE user_id = ?", (user_id,))
    conn.commit()
    await update.message.reply_text(
        "‚úÖ Premium-–¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ!\n–¢–µ–ø–µ—Ä —É —Ç–µ–±–µ –±–µ–∑–ª—ñ–º—ñ—Ç–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —Ç–∞ –¥–æ—Å—Ç—É–ø –¥–æ AI!",
        reply_markup=main_menu()
    )

def main():
    app = Application.builder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("premium", premium))
    app.add_handler(CommandHandler("check_payment", check_payment))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_buttons))
    print("üü¢ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω–æ –∑ AI!")
    app.run_polling()

if __name__ == "__main__":
    main()
